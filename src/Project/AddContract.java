/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Project;

import java.awt.GridLayout;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author ANSHIKA
 */
public class AddContract extends javax.swing.JFrame {

    /**
     * Creates new form AddContract
     */
    public AddContract() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        deleteContractID = new javax.swing.JTextField();
        sold = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        rented = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Enter Contract_Id:");

        deleteContractID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteContractIDActionPerformed(evt);
            }
        });

        sold.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sold.setText("Sold +");
        sold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soldActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("<HTML><U>Add Contract</U><HTML>");

        jSeparator1.setBackground(new java.awt.Color(51, 51, 51));
        jSeparator1.setForeground(new java.awt.Color(51, 51, 51));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("<HTML><U>Delete Contract</U><HTML>");

        rented.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rented.setText("Rented +");
        rented.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(49, 49, 49)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 802, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(75, 75, 75)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(272, 272, 272)
                            .addComponent(sold, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(232, 232, 232)
                            .addComponent(rented, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(76, 76, 76)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(delete)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deleteContractID, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(203, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sold, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rented, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteContractID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(35, 35, 35)
                .addComponent(delete)
                .addContainerGap(371, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteContractIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteContractIDActionPerformed
        
    }//GEN-LAST:event_deleteContractIDActionPerformed

    private void soldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soldActionPerformed
        int text_size = 30;
        
        JTextField contractID = new JTextField(text_size);
        JTextField agentId = new JTextField(text_size);
        JTextField estateId = new JTextField(text_size);
        JTextField customerId = new JTextField(text_size);
        JTextField customerName = new JTextField(text_size);
        JTextField customerContactNo = new JTextField(text_size);
        //contract type : "sold"
        JTextField dateSigned = new JTextField(text_size);
        

        JPanel estaePannel = new JPanel(new GridLayout(0,1));
        estaePannel.add(new JLabel("contractID:"));
        estaePannel.add(contractID);
        
        estaePannel.add(new JLabel("agentId:"));
        estaePannel.add(agentId);
        
        estaePannel.add(new JLabel("estateId:"));
        estaePannel.add(estateId);
        
        estaePannel.add(new JLabel("customerId:"));
        estaePannel.add(customerId);
        
        estaePannel.add(new JLabel("customerName:"));
        estaePannel.add(customerName);
        
        estaePannel.add(new JLabel("customerContactNo:"));
        estaePannel.add(customerContactNo);
        estaePannel.add(new JLabel("dateSigned:"));
        estaePannel.add(dateSigned);

        
      int result = JOptionPane.showConfirmDialog(null, estaePannel, 
               "Please Enter Contract details", JOptionPane.OK_CANCEL_OPTION);
      if (result == JOptionPane.OK_OPTION) {
         if(!(
                 contractID.getText().isBlank()  || contractID.getText().isEmpty() || 
                 agentId.getText().isBlank()  || agentId.getText().isEmpty() || 
                 estateId.getText().isBlank()  || estateId.getText().isEmpty() || 
                 customerId.getText().isBlank()  || customerId.getText().isEmpty() || 
                 customerContactNo.getText().isBlank()  || customerContactNo.getText().isEmpty() || 
                 dateSigned.getText().isBlank()  || dateSigned.getText().isEmpty()
                 )) {
                    
                    addContract(
                     contractID.getText(), agentId.getText(),
                     estateId.getText(), "SOLD", customerId.getText(),
                     customerName.getText(), customerContactNo.getText(),
                     dateSigned.getText());
                    
                
            }
            
            else {
                
                JOptionPane.showMessageDialog(this, "All attributes are mandatory!",
               "Unsuccesfull", JOptionPane.ERROR_MESSAGE);
                
            }
           
         }
         else {
             
             JOptionPane.showMessageDialog(this, "All attributes are mandatory!",
               "Unsuccesfull", JOptionPane.ERROR_MESSAGE);
             
         }
      
    }//GEN-LAST:event_soldActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        if(deleteContractID.getText().isBlank() || deleteContractID.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "EstateId can't be empty!",
               "Unsuccesfull", JOptionPane.ERROR_MESSAGE);
            return;
        }
        deleteContract(deleteContractID.getText());
    }//GEN-LAST:event_deleteActionPerformed

    private void rentedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentedActionPerformed
        int text_size = 30;
        
        JTextField contractID = new JTextField(text_size);
        JTextField agentId = new JTextField(text_size);
        JTextField estateId = new JTextField(text_size);
        JTextField customerId = new JTextField(text_size);
        JTextField customerName = new JTextField(text_size);
        JTextField customerContactNo = new JTextField(text_size);
        //contract type : "sold"
        JTextField dateSigned = new JTextField(text_size);
        

        JPanel estaePannel = new JPanel(new GridLayout(0,1));
        estaePannel.add(new JLabel("contractID:"));
        estaePannel.add(contractID);
        
        estaePannel.add(new JLabel("agentId:"));
        estaePannel.add(agentId);
        
        estaePannel.add(new JLabel("estateId:"));
        estaePannel.add(estateId);
        
        estaePannel.add(new JLabel("customerId:"));
        estaePannel.add(customerId);
        
        estaePannel.add(new JLabel("customerName:"));
        estaePannel.add(customerName);
        
        estaePannel.add(new JLabel("customerContactNo:"));
        estaePannel.add(customerContactNo);
        estaePannel.add(new JLabel("dateSigned:"));
        estaePannel.add(dateSigned);

        
      int result = JOptionPane.showConfirmDialog(null, estaePannel, 
               "Please Enter Contract details", JOptionPane.OK_CANCEL_OPTION);
      if (result == JOptionPane.OK_OPTION) {
         if(!(
                 contractID.getText().isBlank()  || contractID.getText().isEmpty() || 
                 agentId.getText().isBlank()  || agentId.getText().isEmpty() || 
                 estateId.getText().isBlank()  || estateId.getText().isEmpty() || 
                 customerId.getText().isBlank()  || customerId.getText().isEmpty() || 
                 customerContactNo.getText().isBlank()  || customerContactNo.getText().isEmpty() || 
                 dateSigned.getText().isBlank()  || dateSigned.getText().isEmpty()
                 )) {
                    
                    if(addContract(
                     contractID.getText(), agentId.getText(),
                     estateId.getText(), "RENTED", customerId.getText(),
                     customerName.getText(), customerContactNo.getText(),
                     dateSigned.getText())) {
                        
                    }
                    
                
            }
            
            else {
                
                JOptionPane.showMessageDialog(this, "All attributes are mandatory!",
               "Unsuccesfull", JOptionPane.ERROR_MESSAGE);
                
            }
           
         }
         else {
             
             JOptionPane.showMessageDialog(this, "All attributes are mandatory!",
               "Unsuccesfull", JOptionPane.ERROR_MESSAGE);
             
         }
    }//GEN-LAST:event_rentedActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddContract.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddContract.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddContract.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddContract.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddContract().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton delete;
    private javax.swing.JTextField deleteContractID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton rented;
    private javax.swing.JButton sold;
    // End of variables declaration//GEN-END:variables

    private boolean addContract(String contractId, String agentId, String estateId, String contractType, String customerId,
            String customerName, String customerContactNo, String dateSigned) {
        
       String insert_query_contract = "Insert into contract values(?,?,?,?,?)";
       String insert_query_customer = "Insert into customer values(?,?,?)";
       String insert_query_contract_with = "Insert into contract_with values(?,?)";
        
        try {
            
            PreparedStatement stmt = Database.connection.prepareStatement(insert_query_contract);
            
            stmt.setString(1, contractId);    stmt.setString(2, agentId);    stmt.setString(3, estateId);
            stmt.setString(4, contractType);    stmt.setString(5, dateSigned);
            
            System.out.println("contract row affected: " + stmt.executeUpdate());
            
            stmt = Database.connection.prepareStatement(insert_query_customer);
            
            stmt.setString(1, customerId);    stmt.setString(2, customerName);    stmt.setString(3, customerContactNo);
            
            System.out.println("customer row affected: " + stmt.executeUpdate());
            
            stmt = Database.connection.prepareStatement(insert_query_contract_with);
            
            stmt.setString(1, contractId);    stmt.setString(2, customerId);
            
            int rowAffected = stmt.executeUpdate();
            System.out.println("contract_with row affected: " + rowAffected);
            JOptionPane.showMessageDialog(this, "rows: affected: " + rowAffected , "succesfull", JOptionPane.OK_OPTION);
            deleteContractID.setText("");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Unsuccesfull", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    private void deleteContract(String contractID) {
        String delete_contract = "Delete from contract where contract_Id = ?";
        String delete_contract_with = "Delete from contract_with where contract_Id = ?";
        
        PreparedStatement stmt;
        
        int rowsAffected = 0;
        try {
            
            stmt = Database.connection.prepareStatement(delete_contract);
            stmt.setString(1, contractID);    
            rowsAffected = stmt.executeUpdate();
            stmt = Database.connection.prepareStatement(delete_contract_with);
            stmt.setString(1, contractID);    
            stmt.executeUpdate();
            System.out.println("row affected: " + rowsAffected);
            JOptionPane.showMessageDialog(this, "rows: affected: " + rowsAffected , "succesfull", JOptionPane.OK_OPTION);
            deleteContractID.setText("");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Unsuccesfull", JOptionPane.ERROR_MESSAGE);
        }
        
    }
}
